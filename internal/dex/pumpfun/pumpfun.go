// =============================
// File: internal/dex/pumpfun/pumpfun.go
// =============================
package pumpfun

import (
	"context"
	"fmt"
	"github.com/gagliardetto/solana-go"
	"github.com/rovshanmuradov/solana-bot/internal/blockchain"
	"github.com/rovshanmuradov/solana-bot/internal/task"
	"sync"
	"time"

	"go.uber.org/zap"
)

// DEX –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Pump.fun.
type DEX struct {
	client *blockchain.Client
	wallet *task.Wallet
	logger *zap.Logger
	config *Config

	// ---------- bonding‚Äëcurve cache ----------
	bcOnce                 sync.Once
	bondingCurve           solana.PublicKey
	associatedBondingCurve solana.PublicKey

	bcCache struct {
		mu        sync.RWMutex
		data      *BondingCurve
		fetchedAt time.Time
	}
}

// NewDEX —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DEX –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pump.fun.
func NewDEX(client *blockchain.Client, w *task.Wallet, logger *zap.Logger, config *Config, _ string) (*DEX, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Pump.fun —É–∫–∞–∑–∞–Ω
	if config.ContractAddress.IsZero() {
		return nil, fmt.Errorf("pump.fun contract address is required")
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞ —É–∫–∞–∑–∞–Ω
	if config.Mint.IsZero() {
		return nil, fmt.Errorf("token mint address is required")
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ DEX
	logger.Info(fmt.Sprintf("üèóÔ∏è  Creating PumpFun DEX for %s...%s",
		config.Mint.String()[:4],
		config.Mint.String()[len(config.Mint.String())-4:]))

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DEX —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	dex := &DEX{
		client: client,
		wallet: w,
		logger: logger.Named("pumpfun"),
		config: config,
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
	fetchCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–æ–º–∏—Å—Å–∏–π
	globalAccount, err := FetchGlobalAccount(fetchCtx, client, config.Global, logger)
	if err != nil {
		logger.Warn("‚ö†Ô∏è  Failed to fetch global account data, using default fee recipient: " + err.Error())
	} else if globalAccount != nil {
		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–æ–º–∏—Å—Å–∏–π –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
		config.FeeRecipient = globalAccount.FeeRecipient
		logger.Info("üìß Updated fee recipient: " + config.FeeRecipient.String())
	}

	return dex, nil
}

// ExecuteSnipe –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Pump.fun —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º SOL.
func (d *DEX) ExecuteSnipe(ctx context.Context, amountSol float64, slippagePercent float64, priorityFeeSol string, computeUnits uint32) error {
	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	d.logger.Info(fmt.Sprintf("üí∞ Starting Pump.fun buy: %.3f SOL (%.1f%% slippage)", amountSol, slippagePercent))

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	opCtx, cancel := d.prepareTransactionContext(ctx, 45*time.Second)
	defer cancel()

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SOL –≤ –ª–∞–º–ø–ø–æ—Ä—Ç—ã (1 SOL = 10^9 –ª–∞–º–ø–ø–æ—Ä—Ç–æ–≤)
	solAmountLamports := uint64(amountSol * 1_000_000_000)

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏
	d.logger.Info(fmt.Sprintf("üìä Using exact SOL amount: %.9f SOL", float64(solAmountLamports)/1_000_000_000))

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
	instructions, err := d.prepareBuyTransaction(opCtx, solAmountLamports, priorityFeeSol, computeUnits)
	// TODO: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É solAmountLamports, priorityFeeSol, computeUnits. –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å –∏–∑ config.json and tasks.csv

	if err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	_, err = d.sendAndConfirmTransaction(opCtx, instructions)
	return err
}

// ExecuteSell –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Pump.fun.
func (d *DEX) ExecuteSell(ctx context.Context, tokenAmount uint64, slippagePercent float64, priorityFeeSol string, computeUnits uint32) error {
	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏
	d.logger.Info(fmt.Sprintf("üí± Starting Pump.fun sell: %d tokens (%.1f%% slippage)", tokenAmount, slippagePercent))

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	opCtx, cancel := d.prepareTransactionContext(ctx, 45*time.Second)
	defer cancel()

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏
	instructions, err := d.prepareSellTransaction(opCtx, tokenAmount, slippagePercent, priorityFeeSol, computeUnits)
	// TODO: —Ç–æ–∂–µ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É

	if err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	_, err = d.sendAndConfirmTransaction(opCtx, instructions)
	if err != nil {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ Raydium)
		return d.handleSellError(err)
	}

	return nil
}

// IsBondingCurveComplete –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ bonding curve –¥–ª—è —Ç–æ–∫–µ–Ω–∞.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ bonding curve –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–Ω–∞—á–µ false.
func (d *DEX) IsBondingCurveComplete(ctx context.Context) (bool, error) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ bonding curve
	bc, _, err := d.getBondingCurveData(ctx)
	if err != nil {
		return false, fmt.Errorf("failed to get bonding curve data: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ Complete
	return bc.Complete, nil
}
