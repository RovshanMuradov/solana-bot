package monitor

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/rovshanmuradov/solana-bot/internal/dex"
	"go.uber.org/zap"
)

// SessionConfig contains configuration for a monitoring session
type SessionConfig struct {
	TokenMint       string        // Token mint address
	TokenAmount     float64       // Human-readable amount of tokens purchased
	TokenBalance    uint64        // Raw token balance in smallest units
	InitialAmount   float64       // Initial SOL amount spent
	InitialPrice    float64       // Initial token price
	MonitorInterval time.Duration // Interval for price updates
	DEX             dex.DEX       // DEX interface
	Logger          *zap.Logger   // Logger

	// Transaction parameters from the original task
	SlippagePercent float64 // Slippage percentage for transactions
	PriorityFee     string  // Priority fee for transactions
	ComputeUnits    uint32  // Compute units for transactions
}

// MonitoringSession manages a token monitoring session
type MonitoringSession struct {
	config       *SessionConfig
	priceMonitor *PriceMonitor
	inputHandler *InputHandler
	wg           sync.WaitGroup
	ctx          context.Context
	cancel       context.CancelFunc
	logger       *zap.Logger
}

// NewMonitoringSession creates a new monitoring session
func NewMonitoringSession(config *SessionConfig) *MonitoringSession {
	ctx, cancel := context.WithCancel(context.Background())
	return &MonitoringSession{
		config: config,
		logger: config.Logger,
		ctx:    ctx,
		cancel: cancel,
	}
}

// Start begins the monitoring session
func (ms *MonitoringSession) Start() error {
	// Create a price monitor
	ms.priceMonitor = NewPriceMonitor(
		ms.config.DEX,
		ms.config.TokenMint,
		ms.config.InitialPrice,
		ms.config.TokenAmount,
		ms.config.InitialAmount,
		ms.config.MonitorInterval,
		ms.logger.Named("price"),
		ms.onPriceUpdate,
	)

	// Create an input handler
	ms.inputHandler = NewInputHandler(ms.logger.Named("input"))

	// Register commands
	ms.inputHandler.RegisterCommand("", ms.onEnterPressed) // Empty command (Enter key)
	ms.inputHandler.RegisterCommand("q", ms.onExitCommand)
	ms.inputHandler.RegisterCommand("exit", ms.onExitCommand)

	// Start the components
	ms.wg.Add(1)
	go func() {
		defer ms.wg.Done()
		ms.priceMonitor.Start()
	}()

	ms.inputHandler.Start()

	// Clear screen and show initial message
	fmt.Print("\033[H\033[2J") // Clear screen
	fmt.Println("\nüöÄ Monitoring started. Press Enter to sell tokens or 'q' to exit.")
	return nil
}

// Wait waits for the session to complete
func (ms *MonitoringSession) Wait() error {
	ms.wg.Wait()
	return nil
}

// Stop stops the monitoring session
func (ms *MonitoringSession) Stop() {
	// Stop the input handler
	if ms.inputHandler != nil {
		ms.inputHandler.Stop()
	}

	// Stop the price monitor
	if ms.priceMonitor != nil {
		ms.priceMonitor.Stop()
	}

	// Cancel the context
	if ms.cancel != nil {
		ms.cancel()
	}
}

// UpdateWithDiscretePnL –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —É—á–µ—Ç–æ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ PnL
func (ms *MonitoringSession) UpdateWithDiscretePnL() error {
	// –ú–µ–Ω—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω—ã
	ms.priceMonitor.SetCallback(func(currentPrice, initialPrice, percentChange, tokenAmount float64) {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é onPriceUpdate
		ms.onPriceUpdate(currentPrice, initialPrice, percentChange, tokenAmount)
	})

	return nil
}

// printColoredText –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
func printColoredText(format string, value float64, isPositive bool, args ...interface{}) {
	var colorCode string
	
	if value == 0 {
		colorCode = "\033[0m" // Default color
	} else if isPositive {
		colorCode = "\033[32m" // Green
	} else {
		colorCode = "\033[31m" // Red
	}
	
	allArgs := append([]interface{}{value}, args...)
	fmt.Printf(colorCode+format+"\033[0m", allArgs...)
}

// onPriceUpdate is called when the price is updated
func (ms *MonitoringSession) onPriceUpdate(currentPrice, initialPrice, percentChange, tokenAmount float64) {
	// Clear screen for each update
	fmt.Print("\033[H\033[2J")
	
	// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL
	currentValue := currentPrice * tokenAmount
	profit := currentValue - ms.config.InitialAmount
	profitPercent := 0.0
	if ms.config.InitialAmount > 0 {
		profitPercent = (profit / ms.config.InitialAmount) * 100
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π PnL –¥–ª—è Pump.fun
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	discretePnL, err := ms.config.DEX.CalculateDiscretePnL(ctx, tokenAmount, ms.config.InitialAmount)
	fmt.Println("\n")
	fmt.Println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
	fmt.Printf("‚îÇ \033[1;36m%-63s\033[0m ‚îÇ\n", "SOLANA TRADING BOT - PRICE MONITOR")
	fmt.Println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
	fmt.Printf("‚îÇ \033[1;33m%-20s\033[0m %-41s ‚îÇ\n", "Exchange:", ms.config.DEX.GetName())
	fmt.Printf("‚îÇ \033[1;33m%-20s\033[0m %-41s ‚îÇ\n", "Token:", shortenAddress(ms.config.TokenMint))
	fmt.Println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
	
	if err == nil && discretePnL != nil {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.9f SOL                    ‚îÇ\n", "Entry Price:", initialPrice)
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.9f SOL                    ‚îÇ\n", "Current Price:", discretePnL.CurrentPrice)
		
		// Price change with color
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m ", "Price Change:")
		printColoredText("%.2f%%%-39s ‚îÇ\n", percentChange, percentChange > 0, "")
		
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.6f                          ‚îÇ\n", "Token Amount:", tokenAmount)
		fmt.Println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.6f SOL                      ‚îÇ\n", "Initial Investment:", discretePnL.InitialInvestment)
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.6f SOL                      ‚îÇ\n", "Theoretical Value:", discretePnL.TheoreticalValue)
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.6f SOL                      ‚îÇ\n", "Sell Estimate:", discretePnL.SellEstimate)
		
		// Print Net PnL with color
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m ", "Net PnL:")
		printColoredText("%.6f SOL%-29s ‚îÇ\n", discretePnL.NetPnL, discretePnL.NetPnL > 0, "")
		
		// Print PnL percentage with color
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m ", "ROI:")
		printColoredText("%.2f%%%-39s ‚îÇ\n", discretePnL.PnLPercentage, discretePnL.PnLPercentage > 0, "")
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.9f SOL                    ‚îÇ\n", "Entry Price:", initialPrice)
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.9f SOL                    ‚îÇ\n", "Current Price:", currentPrice)
		
		// Price change with color
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m ", "Price Change:")
		printColoredText("%.2f%%%-39s ‚îÇ\n", percentChange, percentChange > 0, "")
		
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.6f                          ‚îÇ\n", "Token Amount:", tokenAmount)
		fmt.Println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.6f SOL                      ‚îÇ\n", "Initial Investment:", ms.config.InitialAmount)
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m %.6f SOL                      ‚îÇ\n", "Current Value:", currentValue)
		
		// Print Net PnL with color
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m ", "Net PnL:")
		printColoredText("%.6f SOL%-29s ‚îÇ\n", profit, profit > 0, "")
		
		// Print PnL percentage with color
		fmt.Printf("‚îÇ \033[1;37m%-20s\033[0m ", "ROI:")
		printColoredText("%.2f%%%-39s ‚îÇ\n", profitPercent, profitPercent > 0, "")
	}
	
	fmt.Println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
	fmt.Printf("‚îÇ \033[1;32m%-63s\033[0m ‚îÇ\n", "Press Enter to sell tokens or 'q' to exit")
	fmt.Println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
	
	// Add update timestamp at the bottom
	fmt.Printf("\n\033[90mLast update: %s\033[0m\n", time.Now().Format("15:04:05"))
}

// shortenAddress —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
func shortenAddress(address string) string {
	if len(address) > 12 {
		return address[:6] + "..." + address[len(address)-4:]
	}
	return address
}

// onEnterPressed is called when Enter is pressed
func (ms *MonitoringSession) onEnterPressed(_ string) error {
	// Clear screen
	fmt.Print("\033[H\033[2J")
	fmt.Println("\nüöÄ Selling tokens...")

	// Stop the monitoring session
	ms.Stop()

	// –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (99%)
	percentToSell := 99.0

	ms.logger.Info("Executing sell operation",
		zap.String("token_mint", ms.config.TokenMint),
		zap.Float64("percent_to_sell", percentToSell),
		zap.Float64("slippage_percent", ms.config.SlippagePercent),
		zap.String("priority_fee", ms.config.PriorityFee),
		zap.Uint32("compute_units", ms.config.ComputeUnits))

	// –ü—Ä–æ–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤
	err := ms.config.DEX.SellPercentTokens(
		context.Background(),
		ms.config.TokenMint,
		percentToSell,
		ms.config.SlippagePercent,
		ms.config.PriorityFee,
		ms.config.ComputeUnits,
	)

	if err != nil {
		fmt.Printf("\n\033[31mError selling tokens: %v\033[0m\n", err)
		return err
	}

	fmt.Println("\n\033[32m‚úÖ Tokens sold successfully!\033[0m")
	return nil
}

// onExitCommand is called when exit command is entered
func (ms *MonitoringSession) onExitCommand(_ string) error {
	// Clear screen
	fmt.Print("\033[H\033[2J")
	fmt.Println("\n\033[33mExiting monitor mode without selling tokens.\033[0m")
	ms.Stop()
	return nil
}