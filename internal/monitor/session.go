// internal/monitor/session.go
package monitor

import (
	"context"
	"fmt"
	"github.com/rovshanmuradov/solana-bot/internal/dex/model"
	"github.com/rovshanmuradov/solana-bot/internal/task"
	"math"
	"sync"
	"time"

	"github.com/rovshanmuradov/solana-bot/internal/dex"
	"go.uber.org/zap"
)

// SessionConfig contains configuration for a monitoring session
type SessionConfig struct {
	Task            *task.Task    // ‚úÖ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É
	TokenBalance    uint64        // Raw token balance in smallest units
	InitialPrice    float64       // Initial token price
	DEX             dex.DEX       // DEX adapter
	Logger          *zap.Logger   // Logger
	MonitorInterval time.Duration // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
}

// MonitoringSession –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ DEX.
type MonitoringSession struct {
	config       *SessionConfig
	priceMonitor *PriceMonitor
	inputHandler *InputHandler
	wg           sync.WaitGroup
	ctx          context.Context
	cancel       context.CancelFunc
	logger       *zap.Logger
}

// NewMonitoringSession —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
func NewMonitoringSession(config *SessionConfig) *MonitoringSession {
	ctx, cancel := context.WithCancel(context.Background())
	return &MonitoringSession{
		config: config,
		logger: config.Logger,
		ctx:    ctx,
		cancel: cancel,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
func (ms *MonitoringSession) Start() error {
	t := ms.config.Task // üëà –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

	ms.logger.Info("Preparing monitoring session",
		zap.String("token", t.TokenMint),
		zap.Float64("initial_investment_sol", t.AmountSol))

	initialPrice := ms.config.InitialPrice
	initialTokens := t.AutosellAmount

	if initialPrice == 0 {
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		initialPrice, _ = ms.config.DEX.GetTokenPrice(ctx, t.TokenMint)
		cancel()
	}
	if initialTokens == 0 && ms.config.TokenBalance == 0 {
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		bal, err := ms.config.DEX.GetTokenBalance(ctx, t.TokenMint)
		cancel()
		if err == nil {
			ms.config.TokenBalance = bal
			initialTokens = float64(bal) / 1e6
		}
	}

	ms.logger.Info("Monitor start",
		zap.String("token", t.TokenMint),
		zap.Float64("initial_price", initialPrice),
		zap.Float64("initial_tokens", initialTokens),
		zap.Uint64("initial_tokens_raw", ms.config.TokenBalance))

	ms.config.InitialPrice = initialPrice
	t.AutosellAmount = initialTokens

	// –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω
	ms.priceMonitor = NewPriceMonitor(
		ms.ctx,
		ms.config.DEX,
		t.TokenMint,
		initialPrice,
		initialTokens,
		t.AmountSol,
		ms.config.MonitorInterval,
		ms.logger.Named("price"),
		ms.onPriceUpdate,
	)

	// Create an input handler
	ms.inputHandler = NewInputHandler(ms.ctx, ms.logger.Named("input"))

	// Register commands
	ms.inputHandler.RegisterCommand("", ms.onEnterPressed) // Empty command (Enter key)
	ms.inputHandler.RegisterCommand("q", ms.onExitCommand)
	ms.inputHandler.RegisterCommand("exit", ms.onExitCommand)

	// Start the components
	ms.wg.Add(1)
	go func() {
		defer ms.wg.Done()
		ms.priceMonitor.Start()
	}()

	ms.inputHandler.Start()

	// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	fmt.Println("\nMonitoring started. Press Enter to sell tokens or 'q' to exit.")
	return nil
}

// Wait –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
func (ms *MonitoringSession) Wait() error {
	ms.wg.Wait()
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
func (ms *MonitoringSession) Stop() {
	ms.logger.Debug("Stopping monitoring session...") // –î–æ–±–∞–≤–∏–º –ª–æ–≥

	// Stop the input handler first (usually quick)
	if ms.inputHandler != nil {
		ms.inputHandler.Stop()
		ms.logger.Debug("Input handler stopped.")
	}

	// Stop the price monitor (cancels its context)
	if ms.priceMonitor != nil {
		ms.priceMonitor.Stop()
		ms.logger.Debug("Price monitor stop signal sent.")
	}

	// Cancel the main session context (if not already done by monitor stop)
	if ms.cancel != nil {
		ms.cancel()
		ms.logger.Debug("Main session context cancelled.")
	}

	// –ñ–¥–µ–º, –ø–æ–∫–∞ –≥–æ—Ä—É—Ç–∏–Ω–∞, –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –≤ Start –¥–ª—è priceMonitor.Start(),
	// –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
	doneChan := make(chan struct{})
	go func() {
		ms.wg.Wait() // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω –≤ –≥—Ä—É–ø–ø–µ (—Å–µ–π—á–∞—Å —Ç–∞–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä)
		close(doneChan)
	}()

	// –î–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
	select {
	case <-doneChan:
		ms.logger.Debug("Monitoring goroutine finished gracefully.")
	case <-time.After(5 * time.Second): // –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
		ms.logger.Warn("Timeout waiting for monitoring goroutine to finish.")
	}
	ms.logger.Debug("Monitoring session Stop completed.")
}

// onPriceUpdate –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞.
//
// –ú–µ—Ç–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ —Ç–æ–∫–µ–Ω–∞,
// —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤ –∏ –≤—ã–≤–æ–¥ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
func (ms *MonitoringSession) onPriceUpdate(currentPrice, initialPrice, percentChange, tokenAmount float64) {
	ctx, cancel := context.WithTimeout(ms.ctx, 5*time.Second)
	defer cancel()

	// –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
	updatedBalance, pnlData, err := ms.updateBalanceAndCalculatePnL(ctx, tokenAmount)
	if err != nil {
		return // –§—É–Ω–∫—Ü–∏—è updateBalanceAndCalculatePnL —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
	}

	// –®–∞–≥ 2: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	ms.displayMonitorInfo(currentPrice, initialPrice, percentChange, updatedBalance, pnlData)
}

// updateBalanceAndCalculatePnL –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL.
//
// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
func (ms *MonitoringSession) updateBalanceAndCalculatePnL(ctx context.Context, currentAmount float64) (float64, *model.PnLResult, error) {
	t := ms.config.Task

	// –®–∞–≥ 1: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
	tokenBalanceRaw, err := ms.config.DEX.GetTokenBalance(ctx, t.TokenMint)
	if err != nil {
		ms.logger.Error("Failed to get token balance", zap.Error(err))
		return currentAmount, nil, err
	}

	// –®–∞–≥ 2: –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ ‚Äî –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	updatedBalance := currentAmount
	if tokenBalanceRaw > 0 {
		newBalance := float64(tokenBalanceRaw) / 1e6
		if math.Abs(newBalance-currentAmount) > 0.000001 && newBalance > 0 {
			ms.logger.Debug("Token balance changed",
				zap.Float64("old_balance", currentAmount),
				zap.Float64("new_balance", newBalance))
			ms.config.TokenBalance = tokenBalanceRaw
			updatedBalance = newBalance
		}
	}

	// –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º PnL –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
	calculator, err := GetCalculator(ms.config.DEX, ms.logger)
	if err != nil {
		ms.logger.Error("Failed to get calculator for DEX", zap.Error(err))
		fmt.Printf("\nError: Cannot calculate PnL for %s\n", ms.config.DEX.GetName())
		return updatedBalance, nil, err
	}

	// –®–∞–≥ 4: –°—á–∏—Ç–∞–µ–º PnL –ø–æ —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É, –Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏
	pnlData, err := calculator.CalculatePnL(ctx, updatedBalance, t.AmountSol)
	if err != nil {
		ms.logger.Error("Failed to calculate PnL", zap.Error(err))
		fmt.Printf("\nError calculating PnL: %v\n", err)
		return updatedBalance, nil, err
	}

	return updatedBalance, pnlData, nil
}

// displayMonitorInfo —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
func (ms *MonitoringSession) displayMonitorInfo(currentPrice, initialPrice, percentChange, tokenBalance float64, pnlData *model.PnLResult) {
	t := ms.config.Task
	// –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
	select {
	case <-ms.ctx.Done():
		return
	default:
	}
	// pnlData —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø *PnLData
	pnl := pnlData

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
	changeStr := fmt.Sprintf("%.2f%%", percentChange)
	if percentChange > 0 {
		changeStr = "\033[32m+" + changeStr + "\033[0m" // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
	} else if percentChange < 0 {
		changeStr = "\033[31m" + changeStr + "\033[0m" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PnL
	pnlStr := fmt.Sprintf("%.8f SOL (%.2f%%)", pnl.NetPnL, pnl.PnLPercentage)
	if pnl.NetPnL > 0 {
		pnlStr = "\033[32m+" + pnlStr + "\033[0m" // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
	} else if pnl.NetPnL < 0 {
		pnlStr = "\033[31m" + pnlStr + "\033[0m" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —É–±—ã—Ç–∫–∞
	}

	// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
	fmt.Println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê TOKEN MONITOR ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
	fmt.Printf("‚ïë Token: %-38s ‚ïë\n", shortenAddress(t.TokenMint))
	fmt.Println("‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢")
	fmt.Printf("‚ïë Current Price:       %-14.8f SOL ‚ïë\n", currentPrice)
	fmt.Printf("‚ïë Initial Price:       %-14.8f SOL ‚ïë\n", initialPrice)
	fmt.Printf("‚ïë Price Change:        %-25s ‚ïë\n", changeStr)
	fmt.Printf("‚ïë Tokens Owned:        %-14.6f      ‚ïë\n", tokenBalance)
	fmt.Println("‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢")
	fmt.Printf("‚ïë Sold (Estimate):     %-14.8f SOL ‚ïë\n", pnl.SellEstimate)
	fmt.Printf("‚ïë Invested:            %-14.8f SOL ‚ïë\n", pnl.InitialInvestment)
	fmt.Printf("‚ïë P&L:                 %-25s ‚ïë\n", pnlStr)
	fmt.Println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
	fmt.Println("Press Enter to sell tokens, 'q' to exit without selling")
}

// shortenAddress —Å–æ–∫—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func shortenAddress(address string) string {
	if len(address) <= 20 {
		return address
	}
	return address[:8] + "..." + address[len(address)-8:]
}

// onEnterPressed –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ Enter.
func (ms *MonitoringSession) onEnterPressed(_ string) error {
	t := ms.config.Task

	fmt.Println("\nSelling tokens...")
	ms.cancel()
	ms.inputHandler.Stop()
	ms.priceMonitor.Stop()

	ms.logger.Info("Executing sell operation",
		zap.String("token_mint", t.TokenMint),
		zap.Float64("autosell_amount", t.AutosellAmount),
		zap.Float64("slippage_percent", t.SlippagePercent),
		zap.String("priority_fee", t.PriorityFeeSol),
		zap.Uint32("compute_units", t.ComputeUnits))

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	err := ms.config.DEX.SellPercentTokens(
		ctx,
		t.TokenMint,
		t.AutosellAmount,
		t.SlippagePercent,
		t.PriorityFeeSol,
		t.ComputeUnits,
	)
	if err != nil {
		fmt.Printf("Error selling tokens: %v\n", err)
		return err
	}

	fmt.Println("Tokens sold successfully!")
	return nil
}

// onExitCommand –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞.
func (ms *MonitoringSession) onExitCommand(_ string) error {
	fmt.Println("\nExiting monitor mode without selling tokens.")
	ms.Stop()
	return nil
}
