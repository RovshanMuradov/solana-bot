// internal/bot/ui/handler.go
package ui

import (
	"bufio"
	"context"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/rovshanmuradov/solana-bot/internal/dex/model"
	"github.com/rovshanmuradov/solana-bot/internal/monitor"
	"go.uber.org/zap"
)

// EventType –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –æ—Ç UI
type EventType int

const (
	SellRequested EventType = iota // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–æ–≤ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
	ExitRequested                  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –±–µ–∑ –ø—Ä–æ–¥–∞–∂–∏ (q/exit)
)

// Event –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
type Event struct {
	Type EventType // –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
	Data string    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
}

// Handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
type Handler struct {
	logger    *zap.Logger
	ctx       context.Context
	cancel    context.CancelFunc
	eventChan chan Event
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ UI
func NewHandler(parentCtx context.Context, logger *zap.Logger) *Handler {
	ctx, cancel := context.WithCancel(parentCtx)
	return &Handler{
		logger:    logger.Named("ui"),
		ctx:       ctx,
		cancel:    cancel,
		eventChan: make(chan Event),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
func (h *Handler) Start() {
	h.logger.Debug("Starting UI handler")
	h.logger.Info("üìä Monitoring started - Press Enter to sell tokens or 'q' to exit")

	go func() {
		reader := bufio.NewReader(os.Stdin)

		for {
			select {
			case <-h.ctx.Done():
				h.logger.Debug("UI handler stopped due to context cancellation")
				return
			default:
				// Read a line non-blocking
				line, err := reader.ReadString('\n')
				if err != nil {
					if err == io.EOF {
						// EOF means stdin is closed or detached
						h.logger.Warn("Stdin closed or detached, exiting UI handler")
						h.publishEvent(ExitRequested, "")
						return
					}

					if h.ctx.Err() == nil { // Only log if not canceled
						h.logger.Error("Error reading input", zap.Error(err))
					}
					continue
				}

				// Process the command
				command := strings.TrimSpace(line)

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
				switch command {
				case "":
					// –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
					h.publishEvent(SellRequested, "")
				case "q", "exit":
					// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
					h.publishEvent(ExitRequested, "")
				default:
					h.logger.Warn("‚ö†Ô∏è Unknown command received", zap.String("command", command))
					h.logger.Info("üí° Use Enter to sell tokens or 'q' to exit")
				}
			}
		}
	}()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func (h *Handler) Stop() {
	if h.cancel != nil {
		h.cancel()
	}
	close(h.eventChan)
}

// Events –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
func (h *Handler) Events() <-chan Event {
	return h.eventChan
}

// publishEvent –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª
func (h *Handler) publishEvent(eventType EventType, data string) {
	select {
	case <-h.ctx.Done():
		return
	case h.eventChan <- Event{Type: eventType, Data: data}:
		h.logger.Debug("Published UI event", zap.Int("type", int(eventType)))
	}
}

// shortenAddress –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–µ—á—ë–Ω–Ω—ã–π –≤–∏–¥ –∞–¥—Ä–µ—Å–∞ –≤–∏–¥–∞ "6QwKg‚Ä¶JVuJpump"
func shortenAddress(addr string) string {
	if len(addr) <= 12 {
		return addr
	}
	return addr[:6] + "‚Ä¶" + addr[len(addr)-6:]
}

// Render –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
func Render(update monitor.PriceUpdate, pnl model.PnLResult, tokenMint string) {
	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä (–≤ –∏–¥–µ–∞–ª–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä)
	// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
	logger, _ := zap.NewDevelopment()
	defer logger.Sync()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω—ã
	trendIcon := "üìà"
	if update.Percent < 0 {
		trendIcon = "üìâ"
	} else if update.Percent == 0 {
		trendIcon = "üìä"
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å PnL
	pnlIcon := "üí∞"
	if pnl.NetPnL < 0 {
		pnlIcon = "üìâ"
	} else if pnl.NetPnL > 0 {
		pnlIcon = "üìà"
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
	logger.Info("üíπ Price update",
		zap.String("token", shortenAddress(tokenMint)),
		zap.Float64("current_price", update.Current),
		zap.Float64("initial_price", update.Initial),
		zap.Float64("change_percent", update.Percent),
		zap.Float64("tokens_owned", update.Tokens),
		zap.String("trend", trendIcon),
	)

	logger.Info(fmt.Sprintf("%s PnL update", pnlIcon),
		zap.Float64("net_pnl", pnl.NetPnL),
		zap.Float64("pnl_percentage", pnl.PnLPercentage),
		zap.Float64("sell_estimate", pnl.SellEstimate),
		zap.Float64("initial_investment", pnl.InitialInvestment),
		zap.String("token", shortenAddress(tokenMint)),
	)

	logger.Info("‚å®Ô∏è Commands available - Press Enter to sell, 'q' to exit")
}
