// internal/bot/worker_monitor.go
package bot

import (
	"context"
	"fmt"
	"golang.org/x/sync/errgroup"
	"time"

	"github.com/rovshanmuradov/solana-bot/internal/bot/ui"
	"github.com/rovshanmuradov/solana-bot/internal/dex"
	"github.com/rovshanmuradov/solana-bot/internal/dex/model"
	"github.com/rovshanmuradov/solana-bot/internal/monitor"
	"github.com/rovshanmuradov/solana-bot/internal/task"
	"go.uber.org/zap"
)

// SellFunc –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤
type SellFunc func(ctx context.Context, percent float64) error

// MonitorWorker –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
type MonitorWorker struct {
	ctx             context.Context
	logger          *zap.Logger
	task            *task.Task
	config          *task.Config
	dex             dex.DEX
	session         *monitor.MonitoringSession
	uiHandle        *ui.Handler
	sellFn          SellFunc
	monitorInterval time.Duration
}

// NewMonitorWorker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func NewMonitorWorker(
	ctx context.Context,
	t *task.Task,
	dexAdapter dex.DEX,
	logger *zap.Logger,
	tokenBalance uint64,
	initialPrice float64,
	monitorInterval time.Duration,
	sellFn SellFunc,
) *MonitorWorker {
	return &MonitorWorker{
		ctx:    ctx,
		logger: logger.Named("monitor_worker"),
		task:   t,
		dex:    dexAdapter,
		sellFn: sellFn,
		// Store the monitor interval for later use
		monitorInterval: monitorInterval,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (mw *MonitorWorker) Start() error {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	monitorConfig := &monitor.SessionConfig{
		Task:            mw.task,
		TokenBalance:    0, // –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
		InitialPrice:    0,
		DEX:             mw.dex,
		Logger:          mw.logger.Named("session"),
		MonitorInterval: mw.monitorInterval,
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	mw.uiHandle = ui.NewHandler(mw.ctx, mw.logger)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	mw.session = monitor.NewMonitoringSession(mw.ctx, monitorConfig)

	// –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	g, gCtx := errgroup.WithContext(mw.ctx)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	if err := mw.session.Start(); err != nil {
		return fmt.Errorf("failed to start monitoring session: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
	mw.uiHandle.Start()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
	g.Go(func() error {
		return mw.handleUIEvents(gCtx)
	})

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω—ã
	g.Go(func() error {
		return mw.handlePriceUpdates(gCtx)
	})

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	g.Go(func() error {
		return mw.handleSessionErrors(gCtx)
	})

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	if err := g.Wait(); err != nil {
		mw.logger.Error("‚ùå Monitor worker failed: " + err.Error())
		return err
	}

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (mw *MonitorWorker) Stop() {
	if mw.uiHandle != nil {
		mw.uiHandle.Stop()
	}
	if mw.session != nil {
		mw.session.Stop()
	}
}

// handleUIEvents processes UI events and initiates sale or exit
func (mw *MonitorWorker) handleUIEvents(ctx context.Context) error {
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()

		case event, ok := <-mw.uiHandle.Events():
			if !ok {
				return nil // channel closed
			}

			switch event.Type {
			case ui.SellRequested:
				mw.logger.Info("üí∞ Sell requested by user")

				fmt.Println("\nPreparing to sell tokens...")

				// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
				sellCtx, cancel := context.WithTimeout(ctx, 60*time.Second)
				defer cancel()

				// RPC-–∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —É–∂–µ –∂–¥–µ—Ç CommitmentProcessed
				mw.logger.Info("üí± Processing sell request for: " + mw.task.TokenMint)

				fmt.Println("Selling tokens now...")

				// Stop UI updates and price monitoring AFTER preparing the sell request
				// but BEFORE executing the sell operation
				mw.Stop()

				// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
				if err := mw.sellFn(sellCtx, mw.task.AutosellAmount); err != nil {
					mw.logger.Error("‚ùå Failed to sell tokens: " + err.Error())
					fmt.Printf("Error selling tokens: %v\n", err)
					return err // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ–ø–∞–ª–∞ –≤ errgroup
				}

				mw.logger.Info("‚úÖ Tokens sold successfully!")
				fmt.Println("Tokens sold successfully!")
				return nil

			case ui.ExitRequested:
				mw.logger.Info("üö™ Exit requested by user")
				fmt.Println("\nExiting monitor mode without selling tokens.")
				mw.Stop()
				return nil
			}
		}
	}
}

// handlePriceUpdates –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç —Å–µ—Å—Å–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (mw *MonitorWorker) handlePriceUpdates(ctx context.Context) error {
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case update, ok := <-mw.session.PriceUpdates():
			if !ok {
				return nil // –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
			}

			// –†–∞—Å—á–µ—Ç PnL
			pnlData, err := mw.calculatePnL(ctx, update)
			if err != nil {
				mw.logger.Error("‚ùå Failed to calculate PnL: " + err.Error())
				continue
			}

			// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ UI
			ui.Render(update, *pnlData, mw.task.TokenMint)
		}
	}
}

// handleSessionErrors –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Å—Å–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (mw *MonitorWorker) handleSessionErrors(ctx context.Context) error {
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case err, ok := <-mw.session.Err():
			if !ok {
				return nil // –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
			}
			mw.logger.Error("‚ùå Session error: " + err.Error())
			return err // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥—Ä—É–ø–ø—É
		}
	}
}

// calculatePnL —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
func (mw *MonitorWorker) calculatePnL(ctx context.Context, update monitor.PriceUpdate) (*model.PnLResult, error) {
	calculator, err := monitor.GetCalculator(mw.dex, mw.logger)
	if err != nil {
		return nil, fmt.Errorf("failed to get calculator for DEX: %w", err)
	}

	pnlData, err := calculator.CalculatePnL(ctx, update.Tokens, mw.task.AmountSol)
	if err != nil {
		return nil, fmt.Errorf("failed to calculate PnL: %w", err)
	}

	return pnlData, nil
}
